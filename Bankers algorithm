#include <stdio.h>
#include <stdbool.h>
#define P 5 
#define R 3 
int allocation[P][R] = { {0, 1, 0},{2, 0, 0},{3, 0, 2},{2, 1, 1},{0, 0, 2} };
int max[P][R] = { {7, 5, 3},{3, 2, 2},{9, 0, 2},{2, 2, 2},{4, 3, 3} };
int available[R] = {3, 3, 2};
bool isSafe() {
    int work[R];
    bool finish[P] = {0};
    for (int i = 0; i < R; i++) work[i] = available[i];
    while (1) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                bool canAllocate = true;
                for (int r = 0; r < R; r++) {
                    if (max[p][r] - allocation[p][r] > work[r]) {
                        canAllocate = false;
                        break;
                    }
                }
                if (canAllocate) {
                    for (int r = 0; r < R; r++) work[r] += allocation[p][r];
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) break;
    }
    for (int p = 0; p < P; p++) {
        if (!finish[p]) return false;
    }
    return true;
}
int main() {
    if (isSafe()) {
        printf("System is in a safe state.\n");
    } else {
        printf("System is not in a safe state.\n");
    }
    return 0;
}
