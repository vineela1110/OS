#include <stdio.h>
struct Process {
    int id;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turn_around_time;
};
void calculateTimes(struct Process processes[], int n, int quantum) {
    int time = 0;  
    int completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].waiting_time = time - processes[i].burst_time;
                    processes[i].turn_around_time = time;
                    processes[i].remaining_time = 0;
                    completed++;
                }
            }
        }
    }
}
void calculateAverageTimes(struct Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turn_around_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turn_around_time += processes[i].turn_around_time;
    }
    printf("Average Waiting Time = %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time = %.2f\n", (float)total_turn_around_time / n);
}
int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    calculateTimes(processes, n, quantum);
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].waiting_time, processes[i].turn_around_time);
    }
    calculateAverageTimes(processes, n);
    return 0;
}
